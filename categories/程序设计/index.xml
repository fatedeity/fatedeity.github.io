<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程序设计 on 翔仔的个人博客</title><link>https://fatedeity.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.html</link><description>Recent content in 程序设计 on 翔仔的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 25 Sep 2022 13:33:22 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>初识设计模式 - 原型模式</title><link>https://fatedeity.cn/posts/programming-pattern/prototype-design-pattern.html</link><pubDate>Sun, 25 Sep 2022 13:33:22 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/prototype-design-pattern.html</guid><description>&lt;p>原型模式是创建型模式的一种，其特点在于通过 &lt;strong>复制&lt;/strong> 一个已经存在的实例来返回新的实例,而不是新建实例。&lt;/p></description></item><item><title>初识设计模式 - 建造者模式</title><link>https://fatedeity.cn/posts/programming-pattern/builder-design-pattern.html</link><pubDate>Thu, 01 Sep 2022 08:41:07 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/builder-design-pattern.html</guid><description>&lt;p>顾名思义，如何建房子一样，建造者模式可以将复杂对象的建造过程抽象出来，使用相同的构建过程可以构造出不同表现的对象。&lt;/p></description></item><item><title>初识设计模式 - 工厂模式</title><link>https://fatedeity.cn/posts/programming-pattern/factory-design-pattern.html</link><pubDate>Tue, 30 Aug 2022 09:15:59 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/factory-design-pattern.html</guid><description>&lt;p>创建对象可能会导致大量的重复代码，可能会需要复合对象访问不到的信息，也可能提供不了足够级别的抽象，还可能并不是复合对象概念的一部分。工厂设计模式通过定义一个单独的创建对象的方法来解决这些问题。&lt;/p></description></item><item><title>初识设计模式 - 单例模式</title><link>https://fatedeity.cn/posts/programming-pattern/singleton-design-pattern.html</link><pubDate>Fri, 26 Aug 2022 08:32:04 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/singleton-design-pattern.html</guid><description>&lt;p>单例模式是一种创建型设计模式，让开发者能够保证一个类只有一个实例，并提供一个访问该实例的全局节点，有助于协调系统整体的行为。&lt;/p></description></item><item><title>经典设计原则</title><link>https://fatedeity.cn/posts/programming-pattern/classic-design-principles.html</link><pubDate>Mon, 22 Aug 2022 08:41:52 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/classic-design-principles.html</guid><description>&lt;p>设计原则为提高可维护性和可复用性而生，每一种设计模式都符合一个或多个设计原则，因此设计原则也是评价一个设计模式使用效果的重要指标之一。&lt;/p></description></item><item><title>经典设计原则 - SOLID</title><link>https://fatedeity.cn/posts/programming-pattern/classic-design-principles-solid.html</link><pubDate>Thu, 18 Aug 2022 11:24:08 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/classic-design-principles-solid.html</guid><description>&lt;p>SOLID 原则是面向对象编程和面向对象设计的五个基本原则。当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。&lt;/p></description></item><item><title>基于接口而非实现编程</title><link>https://fatedeity.cn/posts/programming-pattern/base-interface-not-implementation.html</link><pubDate>Mon, 08 Aug 2022 11:51:09 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/base-interface-not-implementation.html</guid><description>&lt;p>“基于接口而非实现编程”是一条比较抽象、泛化的设计思想，其的另一个表述是“基于抽象而非实现编程”。从这条设计思想中衍生的理解就是，越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。&lt;/p></description></item><item><title>面向对象的基础知识</title><link>https://fatedeity.cn/posts/programming-pattern/object-oriented-basic.html</link><pubDate>Thu, 04 Aug 2022 15:50:27 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/object-oriented-basic.html</guid><description>&lt;p>面向对象是一种软件开发的编程范式。其概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD 技术、人工智能等领域。&lt;/p></description></item><item><title>设计模式的基础知识</title><link>https://fatedeity.cn/posts/programming-pattern/design-pattern-basic.html</link><pubDate>Thu, 28 Jul 2022 16:12:34 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/design-pattern-basic.html</guid><description>&lt;p>作为一个开发人员，都想写出一手好的代码，而不是别人称的“屎山”，设计模式提供了一系列常见问题的解决方案，通过利用设计模式来尽可能统一规范，可以提高代码的可维护性、可读性、可扩展性。&lt;/p></description></item></channel></rss>
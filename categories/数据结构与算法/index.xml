<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构与算法 on 翔仔的个人博客</title><link>https://fatedeity.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html</link><description>Recent content in 数据结构与算法 on 翔仔的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 25 Jul 2022 09:10:18 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>四大经典算法思想</title><link>https://fatedeity.cn/posts/data-structure-algorithm/classical-algorithm-thought.html</link><pubDate>Mon, 25 Jul 2022 09:10:18 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/classical-algorithm-thought.html</guid><description>&lt;p>学习任何东西，都需要深究其底层，掌握其思想，融会贯通才能应万变。对于算法而言，同样如此，编程的算法题千千万，刷题是刷不完的，还是需要掌握算法的思想才能掌握如何求解算法题。&lt;/p></description></item><item><title>插值查找的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/interpolation-search.html</link><pubDate>Tue, 05 Jul 2022 20:11:38 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/interpolation-search.html</guid><description>&lt;p>插值查找和二分查找一样，是有序表的一种查找算法，其基于二分查找，将查找点的选择改进为自适应选择，提高查找效率。&lt;/p></description></item><item><title>二分查找的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/binary-search.html</link><pubDate>Mon, 04 Jul 2022 10:03:17 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/binary-search.html</guid><description>&lt;p>二分查找是一种提升有序序列搜索效率的查找算法，大大降低了数组查找的时间，其类似的思想也应用到二叉树、数据库索引等场景。&lt;/p></description></item><item><title>基数排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/radix-sort.html</link><pubDate>Sat, 02 Jul 2022 15:01:22 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/radix-sort.html</guid><description>&lt;p>基数排序是桶排序的一种扩展使用，同样是一种非比较的整数排序算法，其原理是将整数位数切割成不同的数字，然后按每个位数分别比较。&lt;/p></description></item><item><title>桶排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/bucket-sort.html</link><pubDate>Thu, 30 Jun 2022 08:42:29 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/bucket-sort.html</guid><description>&lt;p>桶排序是计数排序的一种扩展使用，适用于元素值范围不大的序列。如果对大量学生的考试成绩做排序，就非常适合使用桶排序。&lt;/p></description></item><item><title>计数排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/count-sort.html</link><pubDate>Tue, 28 Jun 2022 21:49:04 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/count-sort.html</guid><description>&lt;p>学习计数排序可以了解到空间换时间的思想，其是一种牺牲空间换时间的排序算法，在其特定的场景上，甚至将时间复杂度降到了线性级别。&lt;/p></description></item><item><title>归并排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/merge-sort.html</link><pubDate>Fri, 24 Jun 2022 08:58:56 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/merge-sort.html</guid><description>&lt;p>归并排序与与快速排序一样，是采用分治法（Divide and Conquer）的一个非常典型的应用，在排序算法中，同时了解归并排序和快速排序，相互印证，能理解得更深。&lt;/p></description></item><item><title>快速排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/quick-sort.html</link><pubDate>Thu, 23 Jun 2022 08:49:12 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/quick-sort.html</guid><description>&lt;p>快速排序是面试当中最常见的排序算法问题了，除了需要理解快速排序的流程，还要理解一些快速排序的代码实现，了解一些优化方法。&lt;/p></description></item><item><title>希尔排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/shell-sort.html</link><pubDate>Wed, 22 Jun 2022 14:07:42 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/shell-sort.html</guid><description>&lt;p>插入排序在对基本有序的较小序列进行排序时，效率是非常高的，希尔排序针对这一点对插入排序的方式进行了再次优化。&lt;/p></description></item><item><title>插入排序的简单理解</title><link>https://fatedeity.cn/posts/data-structure-algorithm/insertion-sort.html</link><pubDate>Mon, 20 Jun 2022 14:13:24 +0800</pubDate><guid>https://fatedeity.cn/posts/data-structure-algorithm/insertion-sort.html</guid><description>&lt;p>插入排对是一个容易被低估的排序算法，虽然其时间复杂度看起来与冒泡排序和选择排序差不多，但是用在相对有序的短序列中却格外的好。&lt;/p></description></item></channel></rss>
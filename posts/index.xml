<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 程序员翔仔</title><link>https://fatedeity.cn/posts.html</link><description>所有文章 | 程序员翔仔</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 25 Nov 2022 15:23:02 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/posts.html" rel="self" type="application/rss+xml"/><item><title>MongoDB - 事务支持</title><link>https://fatedeity.cn/posts/database/mongodb-transaction-support.html</link><pubDate>Fri, 25 Nov 2022 15:23:02 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/database/mongodb-transaction-support.html</guid><description>&lt;p>在 4.2 版本及更高版本中，MongoDB 提供了事务的支持，并且在其是分布式数据库的基础上，提供了支持跨多个操作、集合、数据库、文档和分片的 ACID 事务。&lt;/p></description></item><item><title>MongoDB - 聚合查询</title><link>https://fatedeity.cn/posts/database/mongodb-aggregate-query.html</link><pubDate>Thu, 24 Nov 2022 08:38:28 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/database/mongodb-aggregate-query.html</guid><description>&lt;p>在实际使用时，必不可少地需要将多个文档甚至是多个集合汇总到一起计算、分析，MongoDB 提供了原生聚合框架支持这样的计算、分析。&lt;/p></description></item><item><title>MongoDB - 索引知识</title><link>https://fatedeity.cn/posts/database/mongodb-index-knowledge.html</link><pubDate>Fri, 18 Nov 2022 08:38:28 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/database/mongodb-index-knowledge.html</guid><description>&lt;p>学会 MongoDB 的增删改查只能算得上是“初窥门径”，了解、熟练掌握索引才能算得上“融会贯通”。基本可以认为数据库的索引知识是一个初级开发向中级开发转变所必备的知识。&lt;/p></description></item><item><title>MongoDB - 增删改查</title><link>https://fatedeity.cn/posts/database/mongodb-crud.html</link><pubDate>Wed, 16 Nov 2022 09:37:28 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/database/mongodb-crud.html</guid><description>&lt;p>对于开发人员而言，数据库的增删改查操作才是最常使用的功能，学习 MongoDB 时还需对这些功能熟记于心才行啊。我就在这里做一个简单的备忘，多看官方文档才是正道。&lt;/p></description></item><item><title>MongoDB - 入门指南</title><link>https://fatedeity.cn/posts/database/mongodb-started-guide.html</link><pubDate>Mon, 14 Nov 2022 08:32:58 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/database/mongodb-started-guide.html</guid><description>&lt;p>简单了解 MongoDB 的基本概念之后，就需要了解其提供的一些工具和数据逻辑结构，以真正开始入门 MongoDB 的学习。&lt;/p></description></item><item><title>初识设计模式 - 解释器模式</title><link>https://fatedeity.cn/posts/programming-pattern/interpreter-design-pattern.html</link><pubDate>Fri, 11 Nov 2022 08:26:21 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/programming-pattern/interpreter-design-pattern.html</guid><description>&lt;p>解释器模式是一种使用频率相对较低但学习难度较大的设计模式，它用于描述如何使用面向对象语言构成一个简单的语言解释器。&lt;/p></description></item><item><title>初识设计模式 - 访问者模式</title><link>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</link><pubDate>Thu, 10 Nov 2022 08:32:21 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</guid><description>&lt;p>访问者模式被认为是最复杂的设计模式，并且使用频率不高。大多情况下，你不需要使用访问者模式，但是一旦需要使用它时，那就真的需要使用了。&lt;/p></description></item><item><title>初识设计模式 - 中介模式</title><link>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</link><pubDate>Wed, 09 Nov 2022 08:36:21 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</guid><description>&lt;p>中介模式属于行为型设计模式，可以将原本难以理解的网状结构转换成了相对加单的星型结构，主要用来降低多个对象和类之间的通信复杂性。&lt;/p></description></item><item><title>初识设计模式 - 职责链模式</title><link>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</link><pubDate>Tue, 08 Nov 2022 08:45:21 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</guid><description>&lt;p>职责链模式是一种与策略模式类似的设计模式，都是使用多个对象去处理同一个请求。不同的是，职责链模式针对的一条链路上的所有对象，而不是“非此即彼”的关系。&lt;/p></description></item><item><title>初识设计模式 - 备忘录模式</title><link>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</link><pubDate>Fri, 04 Nov 2022 08:54:02 +0800</pubDate><author>翔仔</author><guid>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</guid><description>&lt;p>备忘录模式是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p></description></item></channel></rss>
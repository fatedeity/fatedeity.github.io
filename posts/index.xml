<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 翔仔的个人博客</title><link>https://fatedeity.cn/posts.html</link><description>Recent content in Posts on 翔仔的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 11 Nov 2022 08:26:21 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>初识设计模式 - 解释器模式</title><link>https://fatedeity.cn/posts/programming-pattern/interpreter-design-pattern.html</link><pubDate>Fri, 11 Nov 2022 08:26:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/interpreter-design-pattern.html</guid><description>&lt;p>解释器模式是一种使用频率相对较低但学习难度较大的设计模式，它用于描述如何使用面向对象语言构成一个简单的语言解释器。&lt;/p></description></item><item><title>初识设计模式 - 访问者模式</title><link>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</link><pubDate>Thu, 10 Nov 2022 08:32:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</guid><description>&lt;p>访问者模式被认为是最复杂的设计模式，并且使用频率不高。大多情况下，你不需要使用访问者模式，但是一旦需要使用它时，那就真的需要使用了。&lt;/p></description></item><item><title>初识设计模式 - 中介模式</title><link>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</link><pubDate>Wed, 09 Nov 2022 08:36:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</guid><description>&lt;p>中介模式属于行为型设计模式，可以将原本难以理解的网状结构转换成了相对加单的星型结构，主要用来降低多个对象和类之间的通信复杂性。&lt;/p></description></item><item><title>初识设计模式 - 职责链模式</title><link>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</link><pubDate>Tue, 08 Nov 2022 08:45:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</guid><description>&lt;p>职责链模式是一种与策略模式类似的设计模式，都是使用多个对象去处理同一个请求。不同的是，职责链模式针对的一条链路上的所有对象，而不是“非此即彼”的关系。&lt;/p></description></item><item><title>初识设计模式 - 备忘录模式</title><link>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</link><pubDate>Fri, 04 Nov 2022 08:54:02 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</guid><description>&lt;p>备忘录模式是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p></description></item><item><title>MongoDB - 简单了解</title><link>https://fatedeity.cn/posts/database/mongodb-simple-know.html</link><pubDate>Tue, 01 Nov 2022 08:47:52 +0800</pubDate><guid>https://fatedeity.cn/posts/database/mongodb-simple-know.html</guid><description>&lt;p>MongoDB 是一个基于分布式文件存储的数据库，因此其常作为使用了大数据技术的公司的优选；MongoDB 的存储是类 JSON 结构，因此在一些敏捷 Web 开发中也常使用到。&lt;/p></description></item><item><title>初识设计模式 - 模板方法模式</title><link>https://fatedeity.cn/posts/programming-pattern/template-method-design-pattern.html</link><pubDate>Wed, 26 Oct 2022 08:43:06 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/template-method-design-pattern.html</guid><description>&lt;p>模板方法模式是一种行为设计模式，它在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。&lt;/p></description></item><item><title>初识设计模式 - 状态模式</title><link>https://fatedeity.cn/posts/programming-pattern/state-design-pattern.html</link><pubDate>Tue, 25 Oct 2022 08:32:47 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/state-design-pattern.html</guid><description>&lt;p>顾名思义，状态模式用于解决系统中与状态相关的问题，如复杂对象的状态转换以及不同状态下行为的封装问题。&lt;/p></description></item><item><title>给 hugo 博客添加搜索功能</title><link>https://fatedeity.cn/posts/z-turn/hugo-add-local-search.html</link><pubDate>Mon, 24 Oct 2022 08:22:42 +0800</pubDate><guid>https://fatedeity.cn/posts/z-turn/hugo-add-local-search.html</guid><description>&lt;p>随着博客的文章越来越多，原本没有搜索功能的博客变得难以使用起来，博客添加一个搜索功能势在必行啊。&lt;/p></description></item><item><title>初识设计模式 - 命令模式</title><link>https://fatedeity.cn/posts/programming-pattern/command-design-pattern.html</link><pubDate>Fri, 21 Oct 2022 08:43:15 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/command-design-pattern.html</guid><description>&lt;p>命令模式是一种数据驱动的设计模式，它属于行为型设计模式。通过使用命令模式，可以极大地降低系统的耦合度。&lt;/p></description></item></channel></rss>
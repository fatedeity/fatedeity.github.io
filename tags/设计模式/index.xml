<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 翔仔的个人博客</title><link>https://fatedeity.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link><description>Recent content in 设计模式 on 翔仔的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 12 Oct 2022 08:48:39 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>初识设计模式 - 享元模式</title><link>https://fatedeity.cn/posts/programming-pattern/flyweight-design-pattern.html</link><pubDate>Wed, 12 Oct 2022 08:48:39 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/flyweight-design-pattern.html</guid><description>&lt;p>享元设计模式（Flyweight Design Pattern）通过共享技术实现相同或相似对象的重用，节省内存，前提是享元对象是不可变对象。&lt;/p></description></item><item><title>初识设计模式 - 组合模式</title><link>https://fatedeity.cn/posts/programming-pattern/composite-design-pattern.html</link><pubDate>Tue, 11 Oct 2022 08:51:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/composite-design-pattern.html</guid><description>&lt;p>组合设计模式（Composite Design Pattern）其应用场景非常特殊，主要用于处理树形结构数据，它可以让叶子对象和容器对象的使用具有一致性。&lt;/p></description></item><item><title>初识设计模式 - 外观模式</title><link>https://fatedeity.cn/posts/programming-pattern/facade-design-pattern.html</link><pubDate>Sun, 09 Oct 2022 08:52:19 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/facade-design-pattern.html</guid><description>&lt;p>外观模式是最常用的结构型设计模式，也是一种非常容易理解的设计模式，其核心就是为多个子系统提供一个统一的接口，将这个接口看作是这些子系统的门面。&lt;/p></description></item><item><title>初识设计模式 - 适配器模式</title><link>https://fatedeity.cn/posts/programming-pattern/adapter-design-pattern.html</link><pubDate>Fri, 30 Sep 2022 08:15:49 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/adapter-design-pattern.html</guid><description>&lt;p>适配器设计模式（Adapter Design Pattern）可以将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。&lt;/p></description></item><item><title>初识设计模式 - 装饰器模式</title><link>https://fatedeity.cn/posts/programming-pattern/decorator-design-pattern.html</link><pubDate>Thu, 29 Sep 2022 08:24:49 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/decorator-design-pattern.html</guid><description>&lt;p>装饰器模式（Decorator Design Pattern）是一种结构型设计模式，通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。简单地说，就是允许向一个现有的功能添加新的功能，同时又不改变其结构。&lt;/p></description></item><item><title>初识设计模式 - 桥接模式</title><link>https://fatedeity.cn/posts/programming-pattern/bridge-design-pattern.html</link><pubDate>Tue, 27 Sep 2022 09:03:06 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/bridge-design-pattern.html</guid><description>&lt;p>桥接模式是一种在日常开发中不是特别常用的设计模式，主要是因为上手难度较大，但是对于理解面向对象设计有非常大的帮助。&lt;/p></description></item><item><title>初识设计模式 - 代理模式</title><link>https://fatedeity.cn/posts/programming-pattern/proxy-design-pattern.html</link><pubDate>Mon, 26 Sep 2022 08:36:29 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/proxy-design-pattern.html</guid><description>&lt;p>代理设计模式（Proxy Design Pattern）指的是，在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能，即扩展目标对象的功能。&lt;/p></description></item><item><title>初识设计模式 - 原型模式</title><link>https://fatedeity.cn/posts/programming-pattern/prototype-design-pattern.html</link><pubDate>Sun, 25 Sep 2022 13:33:22 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/prototype-design-pattern.html</guid><description>&lt;p>原型模式是创建型模式的一种，其特点在于通过 &lt;strong>复制&lt;/strong> 一个已经存在的实例来返回新的实例,而不是新建实例。&lt;/p></description></item><item><title>初识设计模式 - 建造者模式</title><link>https://fatedeity.cn/posts/programming-pattern/builder-design-pattern.html</link><pubDate>Thu, 01 Sep 2022 08:41:07 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/builder-design-pattern.html</guid><description>&lt;p>顾名思义，如何建房子一样，建造者模式可以将复杂对象的建造过程抽象出来，使用相同的构建过程可以构造出不同表现的对象。&lt;/p></description></item><item><title>初识设计模式 - 工厂模式</title><link>https://fatedeity.cn/posts/programming-pattern/factory-design-pattern.html</link><pubDate>Tue, 30 Aug 2022 09:15:59 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/factory-design-pattern.html</guid><description>&lt;p>创建对象可能会导致大量的重复代码，可能会需要复合对象访问不到的信息，也可能提供不了足够级别的抽象，还可能并不是复合对象概念的一部分。工厂设计模式通过定义一个单独的创建对象的方法来解决这些问题。&lt;/p></description></item></channel></rss>
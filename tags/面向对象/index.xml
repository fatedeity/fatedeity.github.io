<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面向对象 on 翔仔的个人博客</title><link>https://fatedeity.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</link><description>Recent content in 面向对象 on 翔仔的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 10 Nov 2022 08:32:21 +0800</lastBuildDate><atom:link href="https://fatedeity.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>初识设计模式 - 访问者模式</title><link>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</link><pubDate>Thu, 10 Nov 2022 08:32:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/visitor-design-pattern.html</guid><description>&lt;p>访问者模式被认为是最复杂的设计模式，并且使用频率不高。大多情况下，你不需要使用访问者模式，但是一旦需要使用它时，那就真的需要使用了。&lt;/p></description></item><item><title>初识设计模式 - 中介模式</title><link>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</link><pubDate>Wed, 09 Nov 2022 08:36:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/mediator-design-pattern.html</guid><description>&lt;p>中介模式属于行为型设计模式，可以将原本难以理解的网状结构转换成了相对加单的星型结构，主要用来降低多个对象和类之间的通信复杂性。&lt;/p></description></item><item><title>初识设计模式 - 职责链模式</title><link>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</link><pubDate>Tue, 08 Nov 2022 08:45:21 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/chain-of-responsibility-design-pattern.html</guid><description>&lt;p>职责链模式是一种与策略模式类似的设计模式，都是使用多个对象去处理同一个请求。不同的是，职责链模式针对的一条链路上的所有对象，而不是“非此即彼”的关系。&lt;/p></description></item><item><title>初识设计模式 - 备忘录模式</title><link>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</link><pubDate>Fri, 04 Nov 2022 08:54:02 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/memento-design-pattern.html</guid><description>&lt;p>备忘录模式是一种行为设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p></description></item><item><title>初识设计模式 - 模板方法模式</title><link>https://fatedeity.cn/posts/programming-pattern/template-method-design-pattern.html</link><pubDate>Wed, 26 Oct 2022 08:43:06 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/template-method-design-pattern.html</guid><description>&lt;p>模板方法模式是一种行为设计模式，它在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。&lt;/p></description></item><item><title>初识设计模式 - 状态模式</title><link>https://fatedeity.cn/posts/programming-pattern/state-design-pattern.html</link><pubDate>Tue, 25 Oct 2022 08:32:47 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/state-design-pattern.html</guid><description>&lt;p>顾名思义，状态模式用于解决系统中与状态相关的问题，如复杂对象的状态转换以及不同状态下行为的封装问题。&lt;/p></description></item><item><title>初识设计模式 - 命令模式</title><link>https://fatedeity.cn/posts/programming-pattern/command-design-pattern.html</link><pubDate>Fri, 21 Oct 2022 08:43:15 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/command-design-pattern.html</guid><description>&lt;p>命令模式是一种数据驱动的设计模式，它属于行为型设计模式。通过使用命令模式，可以极大地降低系统的耦合度。&lt;/p></description></item><item><title>初识设计模式 - 策略模式</title><link>https://fatedeity.cn/posts/programming-pattern/strategy-design-pattern.html</link><pubDate>Wed, 19 Oct 2022 10:52:45 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/strategy-design-pattern.html</guid><description>&lt;p>策略模式是一种非常容易理解的设计模式，其最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。&lt;/p></description></item><item><title>初识设计模式 - 观察者模式</title><link>https://fatedeity.cn/posts/programming-pattern/observer-design-pattern.html</link><pubDate>Mon, 17 Oct 2022 08:51:09 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/observer-design-pattern.html</guid><description>&lt;p>观察者模式是使用频率最高的设计模式之一，用于建立对象与对象之间的依赖关系。当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。&lt;/p></description></item><item><title>初识设计模式 - 迭代器模式</title><link>https://fatedeity.cn/posts/programming-pattern/iterator-design-pattern.html</link><pubDate>Fri, 14 Oct 2022 08:53:55 +0800</pubDate><guid>https://fatedeity.cn/posts/programming-pattern/iterator-design-pattern.html</guid><description>&lt;p>顾名思义，迭代器就是用于迭代操作的对象，其能够像有序序列一样迭代获取集合中对象，并且能够记录下当前所在位置，因此也称游标。&lt;/p></description></item></channel></rss>